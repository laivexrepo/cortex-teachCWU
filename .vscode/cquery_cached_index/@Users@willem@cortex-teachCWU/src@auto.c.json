15
{"last_modification_time":1548175028,"language":1,"import_file":"/Users/willem/cortex-teachCWU/src/auto.c","args":["clang++","-working-directory=/Users/willem/cortex-teachCWU","-target","armv7ar-none-none-eabi","-isystem/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/bin/../lib/gcc/arm-none-eabi/7.3.1/include","-isystem/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/bin/../lib/gcc/arm-none-eabi/7.3.1/include-fixed","-isystem/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/bin/../lib/gcc/arm-none-eabi/7.3.1/../../../../arm-none-eabi/include","-isystem./include","-iquote./include/./","-mthumb","-mcpu=cortex-m3","-mlittle-endian","-Os","-ffunction-sections","-fsigned-char","-fomit-frame-pointer","-fsingle-precision-constant","-fdiagnostics-color","-std=gnu99","/Users/willem/cortex-teachCWU/src/auto.c","-resource-dir=/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/local/include","-isystem/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include","-iframework/System/Library/Frameworks","-iframework/Library/Frameworks"],"includes":[{"line":9,"resolved_path":"/Users/willem/cortex-teachCWU/include/main.h"},{"line":10,"resolved_path":"/Users/willem/cortex-teachCWU/include/auto.h"},{"line":11,"resolved_path":"/Users/willem/cortex-teachCWU/include/chassis.h"}],"dependencies":["/Users/willem/cortex-teachCWU/include/main.h","/Users/willem/cortex-teachCWU/include/API.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/_ansi.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/newlib.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/config.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/features.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_types.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_types.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/cdefs.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/alloca.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stdint.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdint.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_intsup.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stdarg.h","/Users/willem/cortex-teachCWU/include/auto.h","/Users/willem/cortex-teachCWU/include/chassis.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/ieeefp.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/_newlib_version.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/stdlib.h","/usr/local/Caskroom/gcc-arm-embedded/7-2018-q2-update/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stdbool.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0],"uses":[]}],"funcs":[{"id":0,"usr":9259272238308784346,"detailed_name":"void autonomous()","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\nRuns the user autonomous code. This function will be started in its own task with the default\npriority and stack size whenever the robot is enabled via the Field Management System or the\nVEX Competition Switch in the autonomous mode. If the robot is disabled or communications is\nlost, the autonomous task will be stopped by the kernel. Re-enabling the robot will restart\nthe task, not re-start it from where it left off.\n\nCode running in the autonomous task cannot access information from the VEX Joystick. However,\nthe autonomous function can be invoked from another task if a VEX Competition Switch is not\navailable, and it can access joystick information if called in this way.\n\nThe autonomous task may exit, unlike operatorControl() which should never exit. If it does\nso, the robot will await a switch to another mode or disable/enable cycle.","declarations":[],"spell":"31:6-31:16|-1|1|2","extent":"31:1-56:2|-1|1|0","bases":[],"derived":[],"vars":[],"uses":[],"callees":["37:8-37:16|1|3|32","39:8-39:27|2|3|32","40:8-40:17|3|3|32","41:8-41:27|2|3|32","45:7-45:23|4|3|32","49:8-49:16|1|3|32"]},{"id":1,"usr":17551020459731790898,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["37:8-37:16|0|3|32","49:8-49:16|0|3|32"],"callees":[]},{"id":2,"usr":5723280043595488544,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["39:8-39:27|0|3|32","41:8-41:27|0|3|32"],"callees":[]},{"id":3,"usr":14456459968319956984,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["40:8-40:17|0|3|32"],"callees":[]},{"id":4,"usr":2293770670841729242,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["45:7-45:23|0|3|32"],"callees":[]}],"vars":[{"id":0,"usr":11488759873300994694,"detailed_name":"int autoState","short_name_offset":4,"short_name_size":9,"hover":"int autoState = 1","comments":"\n Runs the user autonomous code. This function will be started in its own task with the default\n priority and stack size whenever the robot is enabled via the Field Management System or the\n VEX Competition Switch in the autonomous mode. If the robot is disabled or communications is\n lost, the autonomous task will be stopped by the kernel. Re-enabling the robot will restart\n the task, not re-start it from where it left off.\n\n Code running in the autonomous task cannot access information from the VEX Joystick. However,\n the autonomous function can be invoked from another task if a VEX Competition Switch is not\n available, and it can access joystick information if called in this way.\n\n The autonomous task may exit, unlike operatorControl() which should never exit. If it does\n so, the robot will await a switch to another mode or disable/enable cycle.","declarations":[],"spell":"29:5-29:14|-1|1|2","extent":"29:1-29:18|-1|1|0","type":0,"uses":["35:11-35:20|0|3|4"],"kind":13,"storage":1}]}